C
A=matrix(1:10,nrow=5,ncol=2);
h5write(A, "myhdf5file.h5", "foo/A");
C = matrix(paste(LETTERS[1:10],LETTERS[11:20]),nr=2,nc=5)
h5write(C, "myhdf5file.h5", "foo/foobaa/C");
B=array(runif(10,0.5,1));
h5write(B, "myhdf5file.h5", "foo/B");
h5ls("myhdf5file.h5")
df = data.frame(1L:5L,seq(0,1,length.out=5),c("ab","cde","fghi","a","s"), stringsAsFactors=FALSE)
h5write(df,"myhdf5file.h5","df")
D=h5read("myhdf5file.h5","foo/A");
E=h5read("myhdf5file.h5","foo/B");
F=h5read("myhdf5file.h5","foo/foobaa/C");
H%close()
H5close()
A=matrix(1:10,nrow=5,ncol=2);
h5write(A, "myhdf5file.h5", "foo/A");
C = matrix(paste(LETTERS[1:10],LETTERS[11:20]),nr=2,nc=5)
h5write(C, "myhdf5file.h5", "foo/foobaa/C");
B=array(runif(10,0.5,1));
h5write(B, "myhdf5file.h5", "foo/B");
h5ls("myhdf5file.h5")
df = data.frame(1L:5L,seq(0,1,length.out=5),c("ab","cde","fghi","a","s"), stringsAsFactors=FALSE)
h5write(df,"myhdf5file.h5","df")
D=h5read("myhdf5file.h5","foo/A");
E=h5read("myhdf5file.h5","foo/B");
F=h5read("myhdf5file.h5","foo/foobaa/C");
D
E
F
rm(D)
rm(E)
rm(F)
D=h5read("myhdf5file.h5","foo/A");
H%close()
H5close()
D=h5read("myhdf5file.h5","foo/A");
E=h5read("myhdf5file.h5","foo/B");
F=h5read("myhdf5file.h5","foo/foobaa/C");
F
E
C
h5ls("myhdf5file.h5")
C = matrix(paste(LETTERS[1:10],LETTERS[11:20]),nr=2,nc=5)
h5write(C, "myhdf5file.h5", "foo/foobaa/C");
h5ls("myhdf5file.h5")
C = matrix(paste(LETTERS[1:10],LETTERS[11:20],collapse=TRUE),nr=2,nc=5)
C = matrix(paste(LETTERS[1:10],LETTERS[11:20],collapse=""),nr=2,nc=5)
h5write(C, "myhdf5file.h5", "foo/foobaa/C");
h5ls("myhdf5file.h5")
class(C)
C
class(C)="character"
C
class(C)
h5write(C, "myhdf5file.h5", "foo/foobaa/C", storage.mode="character");
h5createDataset("myhdf5file.h5","foo/S",c(5,8),storage.mode="integer");
h5write(matrix(1:5,nrow=5,ncol=1),file="myhdf5file.h5",name="foo/S",index=list(NULL,1));
h5read("myhdf5file.h5","foo/S");
H5close()
h5createDataset("myhdf5file.h5","foo/S",c(5,8),storage.mode="integer");
h5write(matrix(1:5,nrow=5,ncol=1),file="myhdf5file.h5",name="foo/S",index=list(NULL,1));
h5read("myhdf5file.h5","foo/S");
h5write(matrix(11:40,nrow=5,ncol=6),file="myhdf5file.h5",name="foo/S",index=list(1:5,2:7));
h5read("myhdf5file.h5","foo/S");
h5write(matrix(151:154,nr=2,nc=2), file="myhdf5file.h5",name="foo/S", index=list(2:3,c(3,6)))
h5read("myhdf5file.h5", "foo/S", index=list(2:3,c(2,4)))
h5write(6:10, file="myhdf5file.h5", name="foo/S",start=c(1,2), count=c(1,5))
A = 1:7; B = 1:18; D = seq(0,1,by=0.1);
h5save(A, B, D, file="newfile2.h5")
h5dump("newfile2.h5")
h5ls("myhdf5file.h5")
h5ls
h5ls("newfile2.h5")
h5dump("newfile2.h5")
h5file=H5FCreate("newfile.h5");
h5file=H5Fcreate("newfile.h5");
h5file
hdf5ls("newfile.h5")
h5ls("newfile.h5")
h5group1 <- H5Gcreate(h5file,"foo");
h5group2 <- H5Gcreate(h5file,"baa");
h5group3 <- H5GCreate(h5group1,"foobaa");
h5group3 <- H5Gcreate(h5group1,"foobaa");
h5group3
h5space1 <- H5Screate_simple(d,d);
d=c(5,7);
h5space1 <- H5Screate_simple(d,d);
h5space1
h5createDataset(h5space1,storage.mode="integer");
h5createDataset(h5space1,d,storage.mode="integer");
h5data1 <- H5Dcreate(h5file,"data1","integer",h5space1);
h5data1 <- H5Dcreate(h5file,"data1","H5T_IEEE_F32LE",h5space1);
h5data1
A = seq(0.1,3.5,length.out=5*7)
H5Dwrite(h5dataset1, A)
A = seq(0.1,3.5,length.out=5*7)
H5Dwrite(h5data1, A)
h5data1
B = 1:35
H5Dwrite(h5data2, B)
h5data2 <- H5Dcreate(h5group2, "data2", "H5T_STD_I32LE", h5space1);
B = 1:35
H5Dwrite(h5data2, B)
B
h5data2
H5Dread(h5data)
H5Dread(h5data1)
A
H5Dread(h5data2)
mutoutser <− function (links)
{
nr <- nrow(links);
nc <- ncol(links);
tot <- 0;
for (i in 1:(nr-1))
{
for(j in (i+1):nr)
{
for(k in 1:nc)
{
tot <- tot + links[i,k]*links[j,k];
}
}
}
return(tot/nr)
}
mutoutser <− function (links)
{
nr <- nrow(links);
nc <- ncol(links);
tot <- 0;
for (i in 1:(nr-1))
{
for(j in (i+1):nr)
{
for(k in 1:nc)
{
tot <- tot + links[i,k]*links[j,k];
}
}
}
return(tot/nr)
}
mutoutser = function (links)
{
nr <- nrow(links);
nc <- ncol(links);
tot <- 0;
for (i in 1:(nr-1))
{
for(j in (i+1):nr)
{
for(k in 1:nc)
{
tot <- tot + links[i,k]*links[j,k];
}
}
}
return(tot/nr)
}
sim = function ( nr , nc )
{
lnk <− matrix(sample(0 : 1 , ( nr∗nc ) , rep lace=TRUE) ,nrow=nr );
print (system.time (mutoutser(lnk) ) );
}
sim = function (nr, nc )
{
lnk <− matrix(sample(0 : 1 , ( nr∗nc ) , rep lace=TRUE) ,nrow=nr );
print (system.time (mutoutser(lnk) ) );
}
sim = function (nr, nc )
{
lnk <− matrix(sample(0 : 1 , ( nr∗nc ) , replace=TRUE) ,nrow=nr );
print (system.time (mutoutser(lnk) ) );
}
mutoutser = function (links)
{
nr <- nrow(links);
nc <- ncol(links);
tot <- 0;
for (i in 1:(nr-1))
{
for(j in (i+1):nr)
{
for(k in 1:nc)
{
tot <- tot + links[i,k]*links[j,k];
}
}
}
return(tot/nr)
}
sim = function (nr, nc )
{
lnk = matrix(sample(0 : 1 , ( nr∗nc ) , replace=TRUE) ,nrow=nr );
print (system.time (mutoutser(lnk) ) );
}
sim = function (nr, nc )
{
lnk = matrix(sample(0 : 1 ,nr*nc, replace=TRUE) ,nrow=nr );
print (system.time (mutoutser(lnk) ) );
}
sim(500,500)
mutoutser_vector = function (links)
{
nr <- nrow(links);
nc <- ncol(links);
tot <- 0;
for (i in 1:(nr-1))
{
tot <- tot + sum(links[i,]%*%links[(i+1):nr,]);
}
return(tot/nr)
}
mutoutser_vector = function (links)
{
nr <- nrow(links);
nc <- ncol(links);
tot <- 0;
for (i in 1:(nr-1))
{
tot <- tot + sum(links[i,]%*%links[(i+1):nr,]);
}
return(tot/nr)
}
sim_vector = function (nr, nc )
{
lnk = matrix(sample(0 : 1 ,nr*nc, replace=TRUE) ,nrow=nr );
print (system.time (mutoutser_vector(lnk) ) );
}
sim_vector(500,500)
mutoutser_vector = function (links)
{
nr <- nrow(links);
nc <- ncol(links);
tot <- 0;
for (i in 1:(nr-1))
{
tot <- tot + sum(links[i,]%*%t(links[(i+1):nr,]));
}
return(tot/nr)
}
sim_vector = function (nr, nc )
{
lnk = matrix(sample(0 : 1 ,nr*nc, replace=TRUE) ,nrow=nr );
print (system.time (mutoutser_vector(lnk) ) );
}
sim_vector(500,500)
require(parallel)
makeCluster(4);
makeCluster(8);
makeCluster(100);
makeCluster(8);
cls = initmc(4)
cls <- makeCluster(8);
makeCluster(8);
cls <- makeCluster(8);
cls
length(cls)
cls <- makeCluster(8);
length(cls)
clusterExport(cls,"lnks");
nr=2000;
nc=2000;
lnks <<  matrix(sample(0 : 1 ,nr*nc, replace=TRUE) ,nrow=nr );
lnks <<  matrix(sample(0:1 ,nr*nc, replace=TRUE) ,nrow=nr );
lnks = matrix(sample(0:1 ,nr*nc, replace=TRUE) ,nrow=nr );
lnks <<-  matrix(sample(0:1 ,nr*nc, replace=TRUE) ,nrow=nr );
lnks
dim(lnks)
nr = nrow(lnks)  # lnks global at manager
clusterExport(cls,"lnks");
ichunks <- 1:(nr-1);
tots <- clusterApply(cls,ichunks,doichunk);
doichunk = function (ichunk)
{
tot <- 0;
nr <- nrow(lnks) # lnks global at worker
for(i in ichunk)
{
tot= tot+sum(lnks[(i+1):nr,] %*% t(lnks[i,]));
}
return(tot)
}
tots <- clusterApply(cls,ichunks,doichunk);
doichunk(1)
doichunk = function (ichunk)
{
tot <- 0;
nr <- nrow(lnks) # lnks global at worker
for(i in ichunk)
{
tot= tot+sum(links[i,]%*%t(links[(i+1):nr,]));
}
return(tot)
}
tots <- clusterApply(cls,ichunks,doichunk);
doichunk(1)
doichunk = function (ichunk)
{
tot <- 0;
nr <- nrow(lnks) # lnks global at worker
for(i in ichunk)
{
tot= tot+sum(lnks[i,]%*%t(lnks[(i+1):nr,]));
}
return(tot)
}
tots <- clusterApply(cls,ichunks,doichunk);
tots
Reduce(sum,tots)/nr;
doichunk = function (ichunk)
{
tot <- 0;
nr <- nrow(lnks) # lnks global at worker
for(i in ichunk)
{
tot= tot+sum(lnks[i,]%*%t(lnks[(i+1):nr,]));
}
return(tot)
}
cls <- makeCluster(8);
#ichunk different for each worker
#mutoutser_parallel does the overall job of parallelizing the outer loop
mutoutser_parallel = function(cls)
{
nr = nrow(lnks)  # lnks global at manager
clusterExport(cls,"lnks");
ichunks <- 1:(nr-1);
tots <- clusterApply(cls,ichunks,doichunk);
Reduce(sum,tots)/nr;
}
sim_parallel = function (nr, nc,cls )
{
lnks <<- matrix(sample(0:1 ,nr*nc, replace=TRUE) ,nrow=nr );
print (system.time (mutoutser_parallel(lnks) ) );
}
# clusterApply() sends the ichunks as a list to cluster in round robin manner
sim_parallel(2000,2000);
init(4)
cls <- makeCluster(8);
sim_parallel(2000,2000,cls);
cls
checkCluster(cls)
initmc = function(nworkers)
{
require(parallel)
makeCluster(nworkers)
}
initmc = function(nworkers)
{
require(parallel)
makeCluster(spec=nworkers)
}
initmc(4)
lnks <<- matrix(sample(0:1 ,nr*nc, replace=TRUE) ,nrow=nr );
nr = nrow(lnks)  # lnks global at manager
clusterExport(cls,"lnks");
ichunks <- 1:(nr-1);
tots <- clusterApply(cls,ichunks,doichunk);
tots
Reduce(sum,tots)/nr;
sim_parallel(2000,2000,cls);
initmc(4)
sim_parallel(2000,2000);
sim_parallel = function (nr, nc,cls )
{
lnks <<- matrix(sample(0:1 ,nr*nc, replace=TRUE) ,nrow=nr );
print (system.time (mutoutser_parallel(cls)));
}
sim_parallel(2000,2000);
initmc(4)
sim_parallel(2000,2000);
sim_parallel(2000,2000,cls);
sim_vector(2000,2000)
setwd("/Users/kushal/Documents/gtex-viz/gtex.Kushal/data/")
setwd("/Users/kushal/Documents/gtex-viz/gtex.Kushal/src")
data=read.table("../data/prop_sig_matrix_0_3.txt");
tissue_id_gene_expr_data=unique(read.table("../data/samples_id.txt")[,3]));
tissue_id_gene_expr_data=unique(read.table("../data/samples_id.txt")[,3]);
length(tissue_id_gene_expr_data)
rownames(data)=tissue_id_gene_expr_data;
colnames(data)=tissue_id_gene_expr_data;
write.table(data,"../data/prop_sig_matrix_0_3.txt");
data=read.table("../data/prop_sig_matrix_0_3.txt");
data
heaymap(data)
heatmap(data)
dim(data)
heatmap(as.matrix(data))
tissue_names_filtered
write.table(tissue_id_gene_expr_data,"../data/tissue_id_gene_expr_data.txt");
read.table("../data/names_tissues.txt");
tissue_names_filtered=unlist(lapply(as.matrix(names_tissues),
function(x) substring(x,32,nchar(x)-7)));
names_tissues=read.table("../data/names_tissues.txt");
tissue_names_filtered=unlist(lapply(as.matrix(names_tissues),
function(x) substring(x,32,nchar(x)-7)));
write.table(tissue_names_filtered,"../data/tissue_id_eqtl_study.txt");
tissue_names_filtered
tissue_id_gene_expr_data
tissue_names_filtered
gsub(tissue_id_eqtl_study,"_"," - ");
gsub("_"," - ",tissue_id_eqtl_study);
tissue_id_gene_expr_data=read.table("../data/tissue_id_gene_expr_data.txt");
tissue_id_eqtl_study=read.table("../data/tissue_id_eqtl_study.txt");
gsub("_"," - ",tissue_id_eqtl_study);
tissue_id_eqtl_study
gsub("_"," - ",tissue_id_eqtl_study[,2]);
tissue_id_eqtl_study
as.character(tissue_id_eqtl_study)
length(tissue_id_eqtl_study)
tissue_id_eqtl_study
tissue_id_eqtl_study[1,1]
tissue_id_eqtl_study[1,2]
tissue_id_eqtl_study[2,1]
as.character(tissue_id_eqtl_study[,1])
gsub("_"," - ",as.character(tissue_id_eqtl_study[,1]));
match(tissue_id_gene_expr_data, gsub("_"," - ",as.character(tissue_id_eqtl_study[,1])));
match(as.character(tissue_id_gene_expr_data[,1]), gsub("_"," - ",as.character(tissue_id_eqtl_study[,1])));
match(tissue_id_gene_expr_data,temp_eqtl)
tissue_id_gene_expr_data=as.character(read.table("../data/tissue_id_gene_expr_data.txt")[,1]);
tissue_id_eqtl_study=as.character(read.table("../data/tissue_id_eqtl_study.txt")[,1]);
temp_eqtl= gsub("_"," - ",as.character(tissue_id_eqtl_study[,1]));
match(tissue_id_gene_expr_data,temp_eqtl)
tissue_id_gene_expr_data=as.character(read.table("../data/tissue_id_gene_expr_data.txt")[,1]);
tissue_id_eqtl_study=as.character(read.table("../data/tissue_id_eqtl_study.txt")[,1]);
temp_eqtl= gsub("_"," - ",tissue_id_eqtl_study);
match(tissue_id_gene_expr_data,temp_eqtl)
length(!is.na(match(tissue_id_gene_expr_data,temp_eqtl))
)
length(!is.na(match(tissue_id_gene_expr_data,temp_eqtl)))
match(tissue_id_gene_expr_data,temp_eqtl)
!is.na(match(tissue_id_gene_expr_data,temp_eqtl))
length(tissue_id_gene_expr_data[!is.na(match(tissue_id_gene_expr_data,temp_eqtl))])
temp_eqtl
tissue_id_gene_expr_data
install.packages("stringi")
library(stringi)
stringi(tissue_id_eqtl_study,"_"," - ");
stringi::stri_replace_first_fixed(tissue_id_eqtl_study,"_"," - ");
temp_eqtl=gsub("_"," ",stringi::stri_replace_first_fixed(tissue_id_eqtl_study,"_"," - "));
temp_eqtl
match(tissue_id_gene_expr_data,temp_eqtl)
length(tissue_id_gene_expr_data[!is.na(match(tissue_id_gene_expr_data,temp_eqtl))])
tissue_id_gene_expr_data
temp_eqtl
tissue_id_gene_expr_data_2 = gsub("\\[|\\]", "", tissue_id_gene_expr_data);
length(tissue_id_gene_expr_data_2[!is.na(match(tissue_id_gene_expr_data_2,temp_eqtl))])
tissue_id_gene_expr_data_2
tissue_id_gene_expr_data_2 = gsub("\\(|\\)", "", tissue_id_gene_expr_data);
tissue_id_gene_expr_data_2
length(tissue_id_gene_expr_data_2[!is.na(match(tissue_id_gene_expr_data_2,temp_eqtl))])
tissue_id_gene_expr_data_ = gsub("\\(|\\)", "", tissue_id_gene_expr_data);
length(tissue_id_gene_expr_data[!is.na(match(tissue_id_gene_expr_data_2,temp_eqtl))])
tissue_id_gene_expr_data
length(tissue_id_gene_expr_data[!is.na(match(tissue_id_gene_expr_data,temp_eqtl))])
length(tissue_id_gene_expr_data[!is.na(match(tissue_id_gene_expr_data,temp_eqtl))])
tissue_id_gene_expr_data=as.character(read.table("../data/tissue_id_gene_expr_data.txt")[,1]);
tissue_id_eqtl_study=as.character(read.table("../data/tissue_id_eqtl_study.txt")[,1]);
temp_eqtl= gsub("_"," - ",tissue_id_eqtl_study);
length(tissue_id_gene_expr_data[!is.na(match(tissue_id_gene_expr_data,temp_eqtl))])
temp_eqtl=gsub("_"," ",stringi::stri_replace_first_fixed(tissue_id_eqtl_study,"_"," - "));
length(tissue_id_gene_expr_data[!is.na(match(tissue_id_gene_expr_data,temp_eqtl))])
tissue_id_gene_expr_data_ = gsub("\\(|\\)", "", tissue_id_gene_expr_data);
length(tissue_id_gene_expr_data[!is.na(match(tissue_id_gene_expr_data,temp_eqtl))])
tissue_id_gene_expr_data
tissue_id_gene_expr_data = gsub("\\(|\\)", "", tissue_id_gene_expr_data);
length(tissue_id_gene_expr_data[!is.na(match(tissue_id_gene_expr_data,temp_eqtl))])
match(tissue_id_gene_expr_data,temp_eqtl)
temp_eqtl
temp_eqtl[44]="Whole Blood";
length(tissue_id_gene_expr_data[!is.na(match(tissue_id_gene_expr_data,temp_eqtl))])
match(tissue_id_gene_expr_data,temp_eqtl))
match(tissue_id_gene_expr_data,temp_eqtl)
temp_eqtl[37]="Small Intestine - Terminal Ileum"
length(tissue_id_gene_expr_data[!is.na(match(tissue_id_gene_expr_data,temp_eqtl))])
match(tissue_id_gene_expr_data,temp_eqtl)
tissue_id_gene_expr_data[37]
tissue_id_gene_expr_data[34]
tissue_id_gene_expr_data[31]
tissue_id_gene_expr_data[25]
tissue_id_gene_expr_data[24]
tissue_id_gene_expr_data[20]
tissue_id_gene_expr_data
temp_eqtl
temp_eqtl[3]
temp_eqtl[3]="Adrenal Gland";
length(tissue_id_gene_expr_data[!is.na(match(tissue_id_gene_expr_data,temp_eqtl))])
write.table(temp_eqtl,"../data/tissue_id_eqtl_study.txt");
temp_eqtl
write.table(tissue_id_gene_expr_data,"../data/tissue_id_gene_expr_data.txt");
write.table(temp_eqtl,"../data/tissue_id_eqtl_study.txt");
match(temp_eqtl,tissue_id_gene_expr_data)
tissue_id_gene_expr_data=as.character(read.table("../data/tissue_id_gene_expr_data.txt")[,1]);
tissue_id_eqtl_study=as.character(read.table("../data/tissue_id_eqtl_study.txt")[,1]);
match(tissue_id_eqtl_study,tissue_id_gene_expr_data)
matching_labels=which(!is.na(match(tissue_id_gene_expr_data,tissue_id_eqtl_study)));
matching_labesl
matching_labels
index_tissue=which(tissue_names_filtered=="Cells_EBV-transformed_lymphocytes");
thresh=0.05
##create a matrix showing whether or no lfsr satisfies threshold
sigmat =lfsr_data <= thresh;
sigs=which(rowSums(sigmat)==1)
sigs.it=which(lfsr_data[sigs,index_tissue]<thresh)
#cis_gene_data_mod=apply(cis_gene_data,c(1,2),function(x) min(x,5000));
iplotCurves(post.mean.shrink[sigs[sigs.it],],1:44);
suppressMessages(suppressWarnings(library(tsne)))
suppressMessages(suppressWarnings(library(data.table)))
library(qtlcharts)
