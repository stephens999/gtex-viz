transformedb=postmeans*s.j
dim(transformedb)
head(transformedb)
class(transformedb)
class(postmeans)
heatmap(t(transformedb),main="ShrunkenPostMeans",labRow=tissue.names)
bmean=read.table("~/Dropbox/EE_all_trained_null/post.mean.ee_bmashrunkt.txt")
summary(bmean)
plot(bmean[1,],transformedb[1,])
plot(as.matrix(bmean[1,]),as.matrix(transformedb[1,]))
dim(bmean)
dim(transformedb)
heatmap(t(bmean),main="ShrunkenPostMeans",labRow=tissue.names)
class(bmean)
class(transformedb)
summary(bmean)
summary(transformedb)
rownames(transformedb)
row.names(postmeans) <- seq(1, nrow(postmeans),1)
transformedb=postmeans*s.j
dim(transformedb)
class(transformedb)
heatmap(t(transformedb),main="ShrunkenPostMeans",labRow=tissue.names)
class(s.j)
dim(s.j)
dim(postmeans)
class(s.j*postmeans)
transformendb[1,]
transformedb[1,]
transformedb[100,]
bmean[100,]
rm(list=ls())
setwd("~/gtex-viz/data/ET_model_stronggenesnps/")
postmeans = read.table("post.mean.et_withbma.txt")
tstats=na.omit(read.table("max_tscore_eQTL.table.txt"))
dim(tstats)
tstat[1:10,2]
tstats[1:10,2]
rownames(postmeans)[1:10]
pvs=svd(postmeans)
v=pvs$v;u=pvs$u;d=pvs$d
plot(v[,1],v[,2])
plot(v[,1],v[,2],labels=tissue.names)
tissue.names=colnames(postmeans)
plot(v[,1],v[,2],labels=tissue.names)
?plot
title <-c()
# check for additional function arguments
# check for additional function arguments
# ----- Define a function for plotting a matrix ----- #
#some useful functions and variables
rot90 <- function(a) {
whichone = max(ncol(a),nrow(a))
a90 = t(a[whichone:1,])
return(a90)
}
library(gplots)
ColorRamp = colorpanel(100,low="dark blue",mid="white",high="dark red")
myImagePlot <- function(x, ...){
min <- min(x)
max <- max(x)
yLabels <- rownames(x)
xLabels <- colnames(x)
title <-c()
# check for additional function arguments
if( length(list(...)) ){
Lst <- list(...)
if( !is.null(Lst$zlim) ){
min <- Lst$zlim[1]
max <- Lst$zlim[2]
}
if( !is.null(Lst$yLabels) ){
yLabels <- c(Lst$yLabels)
}
if( !is.null(Lst$xLabels) ){
xLabels <- c(Lst$xLabels)
}
if( !is.null(Lst$title) ){
title <- Lst$title
}
}
# check for null values
if( is.null(xLabels) ){
xLabels <- c(1:ncol(x))
}
if( is.null(yLabels) ){
yLabels <- c(1:nrow(x))
}
layout(matrix(data=c(1,2), nrow=1, ncol=2), widths=c(4,1), heights=c(1,1))
# Red and green range from 0 to 1 while Blue ranges from 1 to 0
ColorRamp <- rgb( seq(0,1,length=256),  # Red
seq(0,1,length=256),  # Green
seq(1,0,length=256))  # Blue
ColorLevels <- seq(min, max, length=length(ColorRamp))
# Reverse Y axis
reverse <- nrow(x) : 1
yLabels <- yLabels[reverse]
x <- x[reverse,]
# Data Map
par(mar = c(3,5,2.5,2))
image(1:length(xLabels), 1:length(yLabels), t(x), col=ColorRamp, xlab="",
ylab="", axes=FALSE, zlim=c(min,max))
if( !is.null(title) ){
title(main=title)
}
axis(BELOW<-1, at=1:length(xLabels), labels=xLabels, cex.axis=0.7)
axis(LEFT <-2, at=1:length(yLabels), labels=yLabels, las= HORIZONTAL<-1,
cex.axis=0.7)
# Color Scale
par(mar = c(3,2.5,2.5,2))
image(1, ColorLevels,
matrix(data=ColorLevels, ncol=length(ColorLevels),nrow=1),
col=ColorRamp,
xlab="",ylab="",
xaxt="n")
layout(1)
}
#install.packages("MASS")
#install.packages("gplots")
#library(gplots)
#truth=read.table("truth.txt.gz",header=T)
#betas=truth[truth$config!="0",paste0(rep("beta.g.",9),seq(1:9))]
#X=betas
zlim = c(min(X),max(X))
layhow = as.matrix(c(rep(1,5),rep(2,5),rep(3,5),rep(4,5),rep(5,5),rep(6,5)))
layout(t(layhow))
par(mfrow=c(2,3))
#plot data
par(mar=c(6,6,6,1))
image(rot90(t(scale(t(X),center=T))),axes=FALSE,xlab="TIssues",ylab="Genes",cex.lab=3,col=ColorRamp,zlim=zlim,main="Data matrix",cex.main=3)
#image(rot90(t(scale(t(X),center=TRUE,scale=FALSE))),axes=FALSE,xlab="samples",ylab="fatures",cex.lab=2,col=ColorRamp,zlim=zlim,main="Data (centered)",cex.main=3)
X=postmeans
zlim = c(min(X),max(X))
layhow = as.matrix(c(rep(1,5),rep(2,5),rep(3,5),rep(4,5),rep(5,5),rep(6,5)))
layout(t(layhow))
par(mfrow=c(2,3))
#plot data
par(mar=c(6,6,6,1))
image(rot90(t(scale(t(X),center=T))),axes=FALSE,xlab="TIssues",ylab="Genes",cex.lab=3,col=ColorRamp,zlim=zlim,main="Data matrix",cex.main=3)
#image(rot90(t(scale(t(X),center=TRUE,scale=FALSE))),axes=FALSE,xlab="samples",ylab="fatures",cex.lab=2,col=ColorRamp,zlim=zlim,main="Data (centered)",cex.main=3)
image(rot90(t(scale(t(X),center=T))),axes=FALSE,xlab="TIssues",ylab="Genes",cex.lab=3,col=ColorRamp,zlim=zlim,main="Data matrix",cex.main=3)
svd.X = svd(scale(X,center=T,scale=F)) #with centering only columns
u = svd.X$u; v=svd.X$v; d=svd.X$d
pcm1 = d[1]*matrix(u[,1])%*%t(matrix(v[,1]))
par(mar=c(6,6,6,1))
image(rot90(pcm1),axes=FALSE,xlab="rank-1 approx",ylab="",main="PC 1",col=ColorRamp,zlim=zlim,cex.main=3,cex.lab=2)
head(X)
summary(X)
ColorRamp <- rgb( seq(0,1,length=256),  # Red
seq(0,1,length=256),  # Green
seq(1,0,length=256))  # Blue
ColorLevels <- seq(min, max, length=length(ColorRamp))
ColorRamp <- rgb( seq(0,1,length=256),  # Red
seq(0,1,length=256),  # Green
seq(1,0,length=256))  # Blue
ColorLevels <- seq(min, max, length=length(ColorRamp))
if( is.null(xLabels) ){
# ----- Define a function for plotting a matrix ----- #
#some useful functions and variables
rot90 <- function(a) {
whichone = max(ncol(a),nrow(a))
a90 = t(a[whichone:1,])
return(a90)
}
library(gplots)
ColorRamp = colorpanel(100,low="dark blue",mid="white",high="dark red")
myImagePlot <- function(x, ...){
min <- min(x)
max <- max(x)
yLabels <- rownames(x)
xLabels <- colnames(x)
title <-c()
# check for additional function arguments
if( length(list(...)) ){
Lst <- list(...)
if( !is.null(Lst$zlim) ){
min <- Lst$zlim[1]
max <- Lst$zlim[2]
}
if( !is.null(Lst$yLabels) ){
yLabels <- c(Lst$yLabels)
}
if( !is.null(Lst$xLabels) ){
xLabels <- c(Lst$xLabels)
}
if( !is.null(Lst$title) ){
title <- Lst$title
}
}
# check for null values
if( is.null(xLabels) ){
xLabels <- c(1:ncol(x))
}
if( is.null(yLabels) ){
yLabels <- c(1:nrow(x))
}
layout(matrix(data=c(1,2), nrow=1, ncol=2), widths=c(4,1), heights=c(1,1))
# Red and green range from 0 to 1 while Blue ranges from 1 to 0
ColorRamp <- rgb( seq(0,1,length=256),  # Red
seq(0,1,length=256),  # Green
seq(1,0,length=256))  # Blue
ColorLevels <- seq(min, max, length=length(ColorRamp))
# Reverse Y axis
reverse <- nrow(x) : 1
yLabels <- yLabels[reverse]
x <- x[reverse,]
# Data Map
par(mar = c(3,5,2.5,2))
image(1:length(xLabels), 1:length(yLabels), t(x), col=ColorRamp, xlab="",
ylab="", axes=FALSE, zlim=c(min,max))
if( !is.null(title) ){
title(main=title)
}
axis(BELOW<-1, at=1:length(xLabels), labels=xLabels, cex.axis=0.7)
axis(LEFT <-2, at=1:length(yLabels), labels=yLabels, las= HORIZONTAL<-1,
cex.axis=0.7)
# Color Scale
par(mar = c(3,2.5,2.5,2))
image(1, ColorLevels,
matrix(data=ColorLevels, ncol=length(ColorLevels),nrow=1),
col=ColorRamp,
xlab="",ylab="",
xaxt="n")
layout(1)
}
#install.packages("MASS")
#install.packages("gplots")
#library(gplots)
#truth=read.table("truth.txt.gz",header=T)
#betas=truth[truth$config!="0",paste0(rep("beta.g.",9),seq(1:9))]
#X=betas
svd.X = svd(scale(X,center=T,scale=F)) #with centering only columns
u = svd.X$u; v=svd.X$v; d=svd.X$d
pcm1 = d[1]*matrix(u[,1])%*%t(matrix(v[,1]))
par(mar=c(6,6,6,1))
image(rot90(pcm1),axes=FALSE,xlab="rank-1 approx",ylab="",main="PC 1",zlim=zlim,cex.main=3,cex.lab=2)
ColorLevels
# Red and green range from 0 to 1 while Blue ranges from 1 to 0
ColorRamp <- rgb( seq(0,1,length=256),  # Red
seq(0,1,length=256),  # Green
seq(1,0,length=256))
myImagePlot(t(pc[,1:3]),yLabels=c("PC1","PC2","PC3"),main="First 3 PCs",xLabels=c(names),las=2)
pc = svd.X$v[,1:3]%*%diag(svd.X$d[1:3])
myImagePlot(t(pc[,1:3]),yLabels=c("PC1","PC2","PC3"),main="First 3 PCs",xLabels=c(names),las=2)
betas=as.matrix(X)
par(mfrow=c(1,2))
svd.X = svd(t(scale(t(X),center=T,scale=F))) #with centering only genes
svd.X = svd(scale(X,center=T,scale=F)) #with centering only columns
svd.X=svd(Xc)
svd.X=svd(X)
u = svd.X$u; v=svd.X$v; d=svd.X$d
pc = svd.X$v[,1:3]%*%diag(svd.X$d[1:3])
#pc2=svd.X$u[,1:3]%*%diag(svd.X$d[1:3])
files=list.files(path="/Users/sarahurbut/Dropbox/cyclingstatistician/filtered/",pattern="_filter.txt")
names=NULL
for(i in 1:length(files)){
a=strsplit(files[i], '[.]')[[1]][1]
names[i]=(strsplit(a, '[_]')[[1]][1])
}
par(mfrow=c(1,2))
names=tissue.names
plot(d^2/sum(d^2),main="ProportionVariationExplained",xlab="NumberofEigenTissues")
plot(pc[,1],pc[,2],main="EigenGene Scores on 1st 2 PCs",xlab="EigenGene1",ylab="EigenTissue2",col=c(1:9),cex=0.8)
text(pc[,1],pc[,2],names,col=c(1:43),pos=1)
#score.1=t(u[,1])%*%as.matrix(betas)
#score.2=t(u[,2])%*%as.matrix(betas)
#betas=truth[truth$config!="0",paste0(rep("beta.g.",9),seq(1:9))]
#Xc = t(scale(t(betas),center=TRUE,scale=FALSE))###
#C.nbyn =  t(Xc)%*%Xc
#C.nbyn=t(X)%*%X
#heatmap.2(C.nbyn, Colv = FALSE, Rowv=FALSE, col=redgreen(5), scale="none", key=TRUE, symkey=FALSE, density.info="none", trace="none", cexRow=0.5)
myImagePlot(t(pc[,1:3]),yLabels=c("PC1","PC2","PC3"),main="First 3 PCs",xLabels=c(names),las=2)
myImagePlot
# ----- Define a function for plotting a matrix ----- #
#some useful functions and variables
rot90 <- function(a) {
whichone = max(ncol(a),nrow(a))
a90 = t(a[whichone:1,])
return(a90)
}
library(gplots)
ColorRamp = colorpanel(100,low="dark blue",mid="white",high="dark red")
myImagePlot <- function(x, ...){
min <- min(x)
max <- max(x)
yLabels <- rownames(x)
xLabels <- colnames(x)
title <-c()
# check for additional function arguments
if( length(list(...)) ){
Lst <- list(...)
if( !is.null(Lst$zlim) ){
min <- Lst$zlim[1]
max <- Lst$zlim[2]
}
if( !is.null(Lst$yLabels) ){
yLabels <- c(Lst$yLabels)
}
if( !is.null(Lst$xLabels) ){
xLabels <- c(Lst$xLabels)
}
if( !is.null(Lst$title) ){
title <- Lst$title
}
}
# check for null values
if( is.null(xLabels) ){
xLabels <- c(1:ncol(x))
}
if( is.null(yLabels) ){
yLabels <- c(1:nrow(x))
}
layout(matrix(data=c(1,2), nrow=1, ncol=2), widths=c(4,1), heights=c(1,1))
# Red and green range from 0 to 1 while Blue ranges from 1 to 0
ColorRamp <- rgb( seq(0,1,length=256),  # Red
seq(0,1,length=256),  # Green
seq(1,0,length=256))  # Blue
ColorLevels <- seq(min, max, length=length(ColorRamp))
# Reverse Y axis
reverse <- nrow(x) : 1
yLabels <- yLabels[reverse]
x <- x[reverse,]
# Data Map
par(mar = c(3,5,2.5,2))
image(1:length(xLabels), 1:length(yLabels), t(x), col=ColorRamp, xlab="",
ylab="", axes=FALSE, zlim=c(min,max))
if( !is.null(title) ){
title(main=title)
}
axis(BELOW<-1, at=1:length(xLabels), labels=xLabels, cex.axis=0.7)
axis(LEFT <-2, at=1:length(yLabels), labels=yLabels, las=2,
cex.axis=0.7)
# Color Scale
par(mar = c(3,2.5,2.5,2))
image(1, ColorLevels,
matrix(data=ColorLevels, ncol=length(ColorLevels),nrow=1),
col=ColorRamp,
xlab="",ylab="",
xaxt="n")
layout(1)
}
#install.packages("MASS")
#install.packages("gplots")
#library(gplots)
#truth=read.table("truth.txt.gz",header=T)
#betas=truth[truth$config!="0",paste0(rep("beta.g.",9),seq(1:9))]
#X=betas
myImagePlot(t(pc[,1:3]),yLabels=c("PC1","PC2","PC3"),main="First 3 PCs",xLabels=c(names),las=2)
myImagePlot(t(pc[,1:3]),yLabels=c("PC1","PC2","PC3"),main="First 3 PCs",xLabels=c(names))
myImagePlot(t(pc[,1:3]),yLabels=c("PC1","PC2","PC3"),main="First 3 PCs",xLabels=c(names))
myImagePlot(t(pc[,1:3]),yLabels=c("PC1","PC2","PC3"),main="First 3 PCs",xLabels=c(names),las=2)
Image
image
myImagePlot
# ----- Define a function for plotting a matrix ----- #
#some useful functions and variables
rot90 <- function(a) {
whichone = max(ncol(a),nrow(a))
a90 = t(a[whichone:1,])
return(a90)
}
library(gplots)
ColorRamp = colorpanel(100,low="dark blue",mid="white",high="dark red")
myImagePlot <- function(x, ...){
min <- min(x)
max <- max(x)
yLabels <- rownames(x)
xLabels <- colnames(x)
title <-c()
# check for additional function arguments
if( length(list(...)) ){
Lst <- list(...)
if( !is.null(Lst$zlim) ){
min <- Lst$zlim[1]
max <- Lst$zlim[2]
}
if( !is.null(Lst$yLabels) ){
yLabels <- c(Lst$yLabels)
}
if( !is.null(Lst$xLabels) ){
xLabels <- c(Lst$xLabels)
}
if( !is.null(Lst$title) ){
title <- Lst$title
}
}
# check for null values
if( is.null(xLabels) ){
xLabels <- c(1:ncol(x))
}
if( is.null(yLabels) ){
yLabels <- c(1:nrow(x))
}
layout(matrix(data=c(1,2), nrow=1, ncol=2), widths=c(4,1), heights=c(1,1))
# Red and green range from 0 to 1 while Blue ranges from 1 to 0
ColorRamp <- rgb( seq(0,1,length=256),  # Red
seq(0,1,length=256),  # Green
seq(1,0,length=256))  # Blue
ColorLevels <- seq(min, max, length=length(ColorRamp))
# Reverse Y axis
reverse <- nrow(x) : 1
yLabels <- yLabels[reverse]
x <- x[reverse,]
# Data Map
par(mar = c(3,5,2.5,2))
image(1:length(xLabels), 1:length(yLabels), t(x), col=ColorRamp, xlab="",
ylab="", axes=FALSE, zlim=c(min,max))
if( !is.null(title) ){
title(main=title)
}
axis(BELOW<-1, at=1:length(xLabels), labels=xLabels, cex.axis=0.7,las=2)
axis(LEFT <-2, at=1:length(yLabels), labels=yLabels, las=HORIZONTAL,
cex.axis=0.7)
# Color Scale
par(mar = c(3,2.5,2.5,2))
image(1, ColorLevels,
matrix(data=ColorLevels, ncol=length(ColorLevels),nrow=1),
col=ColorRamp,
xlab="",ylab="",
xaxt="n")
layout(1)
}
#install.packages("MASS")
#install.packages("gplots")
#library(gplots)
#truth=read.table("truth.txt.gz",header=T)
#betas=truth[truth$config!="0",paste0(rep("beta.g.",9),seq(1:9))]
#X=betas
myImagePlot(t(pc[,1:3]),yLabels=c("PC1","PC2","PC3"),main="First 3 PCs",xLabels=c(names),las=2)
dimtstats
dim(tstats)
heatmap.2(cor(X), Colv = FALSE, Rowv=FALSE, col=redgreen(10), scale="none", key=TRUE, symkey=FALSE, density.info="none", trace="none", cexRow=0.5,labRow=c(names),labCol=c(names))
colorRamp(c("red", "green"))( (0:4)/4 ) ## (x) , x in [0,1]
colorRampPalette(c("blue", "red"))( 4 ) ## (n)
zlim = c(min(X),max(X))
layhow = as.matrix(c(rep(1,5),rep(2,5),rep(3,5),rep(4,5),rep(5,5),rep(6,5)))
layout(t(layhow))
#plot data
image(rot90(t(scale(t(X),center=T))),axes=FALSE,xlab="Tissues",ylab="Genes",cex.lab=3,col=redgreen(10),zlim=zlim,main="Data matrix",cex.main=3)
colorRamp(c("red", "green"))( (0:4)/4 ) ## (x) , x in [0,1]
colorRampPalette(c("blue", "red"))( 4 ) ## (n)
zlim = c(min(X),max(X))
#plot data
image(rot90(t(scale(t(X),center=T))),axes=FALSE,xlab="Tissues",ylab="Genes",cex.lab=3,col=redgreen(10),zlim=zlim,main="Data matrix",cex.main=3)
colorRamp(c("red", "green"))( (0:4)/4 ) ## (x) , x in [0,1]
colorRampPalette(c("blue", "red"))( 4 ) ## (n)
zlim = c(min(X),max(X))
#plot data
image(rot90(t(scale(t(X),center=T))),axes=FALSE,xlab="Tissues",ylab="Genes",cex.lab=3,col=redgreen(10),zlim=zlim,main="Data matrix",cex.main=3)
X=tstats
colorRamp(c("red", "green"))( (0:4)/4 ) ## (x) , x in [0,1]
colorRampPalette(c("blue", "red"))( 4 ) ## (n)
zlim = c(min(X),max(X))
#plot data
image(rot90(t(scale(t(X),center=T))),axes=FALSE,xlab="Tissues",ylab="Genes",cex.lab=3,col=redgreen(10),zlim=zlim,main="Data matrix",cex.main=3)
X=tstats9[,-c(1,2,47)]
X=tstats[,-c(1,2,47)]
dim(tstats)
dim(X)
colorRamp(c("red", "green"))( (0:4)/4 ) ## (x) , x in [0,1]
colorRampPalette(c("blue", "red"))( 4 ) ## (n)
zlim = c(min(X),max(X))
#plot data
image(rot90(t(scale(t(X),center=T))),axes=FALSE,xlab="Tissues",ylab="Genes",cex.lab=3,col=redgreen(10),zlim=zlim,main="Data matrix",cex.main=3)
image(rot90(t(scale(t(X),center=T))),axes=FALSE,xlab="Tissues",ylab="Genes",cex.lab=3,col=colRamp,zlim=zlim,main="Data matrix",cex.main=3)
image(rot90(t(scale(t(X),center=T))),axes=FALSE,xlab="Tissues",ylab="Genes",cex.lab=3,col=colorRamp,zlim=zlim,main="Data matrix",cex.main=3)
image(rot90(t(scale(t(X),center=T))),axes=FALSE,xlab="Tissues",ylab="Genes",cex.lab=3,col= colorRampPalette(c("red", "white", "blue"),zlim=zlim,main="Data matrix",cex.main=3)
)
image(rot90(t(scale(t(X),center=T))),axes=FALSE,xlab="Tissues",ylab="Genes",cex.lab=3,col= colorRampPalette(c("red", "white", "blue")),zlim=zlim,main="Data matrix",cex.main=3)
image(rot90(t(scale(t(X),center=T))),axes=FALSE,xlab="Tissues",ylab="Genes",cex.lab=3,col= colorRampPalette(c("red", "white", "blue"),space = "Lab")),zlim=zlim,main="Data matrix",cex.main=3)
image(rot90(t(scale(t(X),center=T))),axes=FALSE,xlab="Tissues",ylab="Genes",cex.lab=3,col= colorRampPalette(c("blue", "red"))( 4 ),zlim=zlim,main="Data matrix",cex.main=3)
svd.X = svd(X)
u = svd.X$u; v=svd.X$v; d=svd.X$d
dim(u)
dim(v)
dirpath=("~/gtex-viz/data/ET_model_stronggenesnps/")
lfsr = read.table(paste0(dirpath,"lfsr.et_withbma.txt"))
dim(lfsr)
dirpath=("~/gtex-viz/data/ET_model_stronggenesnps/")
lfsr = read.table(paste0(dirpath,"lfsr.et_withbma.txt"))
post.means=read.table(paste0(dirpath,"post.mean.et_withbma.txt"))
se.gp.hat=na.omit(read.table(paste0(dirpath,"max_sebeta_eQTL.table.txt"))[,-c(1)]
s.j=se.gp.hat[,-1]#remove genesnpnames
t.stat=na.omit(read.table(paste0(dirpath,"max_tscore_eQTL.table.txt"))[,-c(1,47)]
t.j=t.stat[,-1]
marginal.var=read.table(paste0(dirpath,"marginal.var.et_withbma.txt")
t.stat=na.omit(read.table(paste0(dirpath,"max_tscore_eQTL.table.txt")))[,-c(1,47)]
t.stat=na.omit(read.table(paste0(dirpath,"max_tscore_eQTL.table.txt")))[,-c(1,47)]
marginal.var=read.table(paste0(dirpath,"marginal.var.et_withbma.txt"))
rm(list=ls())
dirpath=("~/gtex-viz/data/ET_model_stronggenesnps/")
lfsr = read.table(paste0(dirpath,"lfsr.et_withbma.txt"))
post.means=read.table(paste0(dirpath,"post.mean.et_withbma.txt"))
se.gp.hat=na.omit(read.table(paste0(dirpath,"max_sebeta_eQTL.table.txt"))[,-c(1)]
s.j=se.gp.hat[,-1]#remove genesnpnames
t.stat=na.omit(read.table(paste0(dirpath,"max_tscore_eQTL.table.txt")))[,-c(1,47)]
t.j=t.stat[,-1]
marginal.var=read.table(paste0(dirpath,"marginal.var.et_withbma.txt"))
pathdir="../gtex-viz/data/ET_model_stronggenesnps/"
)
pathdir=("../gtex-viz/data/ET_model_stronggenesnps/")
postmeans = read.table(paste0(pathdir,"post.mean.et_withbma.txt"))
getwd()
pathdir=("../gtex-viz/data/ET_model_stronggenesnps/")
postmeans = read.table(paste0(pathdir,"post.mean.et_withbma.txt"))
setwd("~/gtex-viz/Plots/")
pathdir=("../gtex-viz/data/ET_model_stronggenesnps/")
postmeans = read.table(paste0(pathdir,"post.mean.et_withbma.txt"))
pathdir=("../data/ET_model_stronggenesnps/")
postmeans = read.table(paste0(pathdir,"post.mean.et_withbma.txt"))
pathdir="../data/ET_model_stronggenesnps/"
lfsr = read.table(paste0(pathdir,"lfsr.et_withbma.txt"))
